# This will eventually become a composite action 
# that should shepherd code to and possibly from a client

name: COURIER

on:
  release:
    types: [published]

env:
  CLIENT_REPO: todd-miller/simple_proj
  CLIENT_BRANCH: development 
  LANDI_REPO: li-argonauts/simple_proj
  LANDI_BRANCH: main
  LANDI_TO_CLIENT_BRANCH: release
  CLIENT_TO_LANDI_BRANCH: todd-miller_main 

jobs:
  landi:
    runs-on: ubuntu-latest
    if: github.repository == 'li-argonauts/simple_proj' 
    steps:
      - name: CHECKOUT 
        uses: actions/checkout@v2
        with:
          ref: development
          persist-credentials: false
          fetch-depth: 0
 
      - name: CHANGE_LOG
        id: change-log 
        run: |
          tag=$(git tag --sort=-committerdate | head -1)
          prev=$(git tag --sort=-committerdate | head -2 | tail -1)
          log=$(git log ${prev}..${tag} --oneline)

          tag_version=$(echo $tag | grep -o '[^-]*$')
          tag_major=$(echo $tag_version | cut -d. -f1)
          tag_minor=$(echo $tag_version | cut -d. -f2)
          tag_patch=$(echo $tag_version | cut -d. -f3)
          
          prev_version=$(echo $prev | grep -o '[^-]*$')
          prev_major=$(echo $prev_version | cut -d. -f1)
          prev_minor=$(echo $prev_version | cut -d. -f2)
          prev_patch=$(echo $prev_version | cut -d. -f3)

          echo "is_patch=$(( $tag_major == $prev_major && $tag_minor == $prev_minor ))" >> $GITHUB_OUTPUT
          echo "major=$tag_major" >> $GITHUB_OUTPUT
          echo "minor=$tag_minor" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "prev=$prev" >> $GITHUB_OUTPUT
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
 
      - name: ECHO THINGS
        run: |
          echo ${{github.ref}}
          echo ${{github.sha}}
          echo ${{steps.change-log.outputs.tag}}
          echo ${{steps.change-log.outputs.prev}}

      - name: CREATE RELEASE BRANCH
        uses: ad-m/github-push-action@master
        if: ${{ steps.change-log.outputs.is_patch == 0 }}
        with:
          force: true
          branch: "refs/heads/v${{steps.change-log.outputs.major}}.${{steps.change-log.outputs.minor}}.x"
          github_token: ${{ secrets.ACCESS_TOKEN }}

  landi-2-client:
    runs-on: ubuntu-latest
    if: github.repository == 'li-argonauts/simple_proj' 
    steps:
      - name: CHECKOUT 
        uses: actions/checkout@v2
        with:
          ref: development
          persist-credentials: false
          fetch-depth: 0
 
      - name: CHANGE_LOG
        id: change-log 
        run: |
          tag=$(git tag --sort=-committerdate | head -1)
          prev=$(git tag --sort=-committerdate | head -2 | tail -1)
          log=$(git log ${prev}..${tag} --oneline)

          tag_version=$(echo $tag | grep -o '[^-]*$')
          tag_major=$(echo $tag_version | cut -d. -f1)
          tag_minor=$(echo $tag_version | cut -d. -f2)
          tag_patch=$(echo $tag_version | cut -d. -f3)
          
          prev_version=$(echo $prev | grep -o '[^-]*$')
          prev_major=$(echo $prev_version | cut -d. -f1)
          prev_minor=$(echo $prev_version | cut -d. -f2)
          prev_patch=$(echo $prev_version | cut -d. -f3)

          echo "is_patch=$(( $tag_major == $prev_major && $tag_minor == $prev_minor ))" >> $GITHUB_OUTPUT
          echo "major=$tag_major" >> $GITHUB_OUTPUT
          echo "minor=$tag_minor" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "prev=$prev" >> $GITHUB_OUTPUT
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$log" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
 
      - name: ECHO THINGS
        run: |
          echo ${{github.ref}}
          echo ${{github.sha}}
          echo ${{steps.change-log.outputs.tag}}
          echo ${{steps.change-log.outputs.prev}}

      - name: PUSH TAG TO REMOTE 
        uses: ad-m/github-push-action@master
        with:
          force: true
          branch: "refs/tags/${{steps.change-log.outputs.tag}}"
          github_token: ${{ secrets.ACCESS_TOKEN }}
          repository: ${{ env.CLIENT_REPO }}

      - name: PUSH BRANCH REMOTE 
        uses: ad-m/github-push-action@master
        with:
          force: true
          branch: "refs/heads/${{steps.change-log.outputs.tag}}"
          github_token: ${{ secrets.ACCESS_TOKEN }}
          repository: ${{ env.CLIENT_REPO }}

#     CHANGES! --> PATCHES will have to get merged towards 'development' AND
#     'release/vA.B.x'
#     not sure how tags need 'delivered'

      - name: OPEN PR
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          source_branch: "refs/heads/${{ steps.change-log.outputs.tag }}"
          destination_branch: ${{ env.CLIENT_BRANCH }}
          destination_repository: ${{ env.CLIENT_REPO }}
          pr_title: "LI Release: ${{ steps.change-log.outputs.tag }}" 
          pr_body: |
            # LI Release: ${{ steps.change-log.outputs.tag }} 
            
            Changes in this Release:

            ${{ steps.change-log.outputs.log}} 

          pr_label: 'LI-RELEASE'
      
 #  curry_to_landi:
 #    runs-on: ubuntu-latest
 #    if: github.repository == 'todd-miller/simple_proj' 
 #    steps:
 #      - name: checkout
 #        uses: actions/checkout@v2
 #        with:
 #          persist-credentials: false
 #          fetch-depth: 0

 #      - name: Push to Remote
 #        uses: ad-m/github-push-action@master
 #        with:
 #          force: true
 #          branch: ${{ env.CLIENT_TO_LANDI_BRANCH }} 
 #          github_token: ${{ secrets.ACCESS_TOKEN }}
 #          repository: ${{ env.LANDI_REPO }}

 #      - name: Open PR
 #        uses: repo-sync/pull-request@v2
 #        with:
 #          github_token: ${{ secrets.ACCESS_TOKEN }}
 #          source_branch: ${{ env.CLIENT_TO_LANDI_BRANCH }} 
 #          destination_branch: ${{ env.LANDI_BRANCH }}
 #          destination_repository: ${{ env.LANDI_REPO }}
 #          pr_title: First PR From CLIENT! 
 #          pr_body: |
 #            # FIRST PR - from CLIENT! 
 #          pr_label: 'UPDATE_WITH_MAIN'
 # 
